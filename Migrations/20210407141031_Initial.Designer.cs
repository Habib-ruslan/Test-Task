// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TestTaskEF.Context;

namespace TestTaskEF.Migrations
{
    [DbContext(typeof(StampContext))]
    [Migration("20210407141031_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.4")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("ListModelStampModel", b =>
                {
                    b.Property<int>("ListsId")
                        .HasColumnType("int");

                    b.Property<int>("StampsId")
                        .HasColumnType("int");

                    b.HasKey("ListsId", "StampsId");

                    b.HasIndex("StampsId");

                    b.ToTable("ListModelStampModel");
                });

            modelBuilder.Entity("TestTaskEF.Models.DeptModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AltNewStamp")
                        .HasColumnType("int");

                    b.Property<int>("AltNextDept")
                        .HasColumnType("int");

                    b.Property<int>("AltOldStamp")
                        .HasColumnType("int");

                    b.Property<int>("NewStamp")
                        .HasColumnType("int");

                    b.Property<int>("NextDept")
                        .HasColumnType("int");

                    b.Property<int>("OldStamp")
                        .HasColumnType("int");

                    b.Property<int>("RuleStamp")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Depts");
                });

            modelBuilder.Entity("TestTaskEF.Models.ListModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("DeptModelId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DeptModelId");

                    b.ToTable("Lists");
                });

            modelBuilder.Entity("TestTaskEF.Models.StampModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.HasKey("Id");

                    b.ToTable("Stamps");
                });

            modelBuilder.Entity("ListModelStampModel", b =>
                {
                    b.HasOne("TestTaskEF.Models.ListModel", null)
                        .WithMany()
                        .HasForeignKey("ListsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TestTaskEF.Models.StampModel", null)
                        .WithMany()
                        .HasForeignKey("StampsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TestTaskEF.Models.ListModel", b =>
                {
                    b.HasOne("TestTaskEF.Models.DeptModel", null)
                        .WithMany("Lists")
                        .HasForeignKey("DeptModelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TestTaskEF.Models.DeptModel", b =>
                {
                    b.Navigation("Lists");
                });
#pragma warning restore 612, 618
        }
    }
}
